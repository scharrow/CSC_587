---
title: "Home Work 1"
author: "Dan Getty"
date: "`r Sys.Date()`"
output:
  html_document: default
  pdf_document: default
header-includes:
  - \usepackage[utf8]{inputenc}
  - \usepackage[T1]{fontenc}
editor_options: 
  markdown: 
    wrap: 72
---

## Set Environment

```{r setup, include=TRUE}
# configure knitr
knitr::opts_chunk$set(message = TRUE, echo = TRUE)
# directory
dir <- 
'G:\\My Drive\\H Drive\\Course Work\\CERG-Data Science\\CSC_587_Advanced_Data_Mining\\HW\\HW1_DataMining_with_R'
# Set the working directory.
setwd(dir)
# load ggplot2 package
library(ggplot2)
# load dplyr package
library(dplyr)
# load tidyr package
library(tidyr)
```

\newpage

# Homework 1

1.a: Use read.delim function to read Su_raw_matrix.txt into a variable
called su.(Notice that su has become a data frame now) Load in the data
set from disk.

```{r 1.a, echo=TRUE}
# build path to Su_raw_matrix.txt
data_file <- file.path('Su_raw_matrix.txt')
# Build data frame from the data set.
su <- read.delim(data_file, header = TRUE, sep = '\t')
```

1.b: Use mean and sd functions to find mean and standard deviation of

```{r 1.b Starndard Deviation, echo=TRUE}
# print the Standard Deviation
sd(su$Liver_2.CEL)
```

```{r 1.b Mean, echo=TRUE}
# print the Mean
mean(su$Liver_2.CEL)
```

1.c: Use colMeans and colSums functions to get the average and total
values of each column.

Column Means

```{r 1.c Coumn Means, echo=TRUE}
colMeans(su[, -1])  # Exclude the first column
```

Column Sums

```{r 1.c Column Sums, echo=TRUE}
colSums(su[, -1])  # Exclude the first Column
```

\newpage

2 Use rnorm(n, mean = 0, sd = 1) function to generate 10000 numbers for
the following(mean, sigma) pairs and plot histogram for each, meaning
you need to change the function parameter accordingly. Then comment on
how these histograms are different from each other and state the reason.
Please save your figures as image from RStudio. (Hint: to see the
difference in plots you may need to set the xlim parameter in plot
function to c(-5,5))

2.a: mean = 0, sigma = 0.2

```{r 2.a, echo=TRUE}
hist(rnorm(10000, mean = 0, sd = 0.2),xlim = c(-5,5))

```

\newpage

2.b: mean = 0, sigma = 0.5

```{r 2.b, echo=TRUE}
hist(rnorm(10000, mean = 0, sd = 0.5),xlim = c(-5,5))
```

The difference between the two histograms is the standard deviation. The
first being 0.2 and the second 0.5. "Standard Deviation (sigma) is a
measure of how dispersed the data is in relation to the mean. Low, or
small, standard deviation indicates data are clustered tightly around
the mean, and high, or large, standard deviation indicates data are more
spread out. A standard deviation close to zero indicates that data
points are very close to the mean, whereas a larger standard deviation
indicates data points are spread further away from the mean."
(<https://www.nlm.nih.gov/oet/ed/stats/02-900.html>)

\newpage

3 Perform the steps below with ”dat” dataframe which is just a sample
data for you to observe how each plot function ( 3b through 3e ) works.
Notice that you need to have ggplot2 library installed on your system.
Please refer slides how to install and import a library. Installation is
done only once, but you need to import the library every time you need
it by saying library(ggplot2). Then run the following commands for
questions from 3a through 3e and observe how the plots are generated
first.

3.a:

```{r 3.a, echo=TRUE}
dat <- data.frame(cond = factor(rep(c("A","B"), each=200)), rating = c(rnorm(200),rnorm(200, mean=.8)))
```

3.b: Overlaid histograms

```{r 3.b, echo=TRUE}
ggplot(dat, aes(x=rating, fill=cond)) + geom_histogram(binwidth=.5, alpha=.5, position="identity")
```

\newpage

3.c: Interleaved Histograms

```{r 3.c, echo=TRUE}
ggplot(dat, aes(x=rating, fill=cond)) + geom_histogram(binwidth=.5, position="dodge")
```

\newpage

3.d: Density plots

```{r 3.d, echo=TRUE}
ggplot(dat, aes(x=rating, colour=cond)) + geom_density()

```


\newpage

3.e: Density plots with semitransparent fill

```{r 3.e, echo=TRUE}
ggplot(dat, aes(x=rating, fill=cond)) + geom_density(alpha=.3)
```


\newpage

3.f: Read ”diabetes_train.csv” into a variable called diabetes and apply
the same functions 3b through 3e for the mass attribute of diabetes and
save the images. (Hint: instead of cond above, use the class attribute
to color your groups. When you have fill option, your plots should show
same type of chart for both groups in different colors on the same
figure. Keep in mind that diabetes and dat are both DataFrames)

Load Diabetes Data

```{r 3.f.a, echo=TRUE}
df_path <- file.path('diabetes_train.csv')
# read csv file
diabetes <- read.csv(df_path, header = TRUE, sep = ',')
glimpse(diabetes)
dbclass = diabetes$class
glimpse(dbclass)
mass = diabetes$mass
glimpse(mass)
massmean <- mean(diabetes$mass)
glimpse(massmean)
masssd <- sd(diabetes$mass)
glimpse(masssd)
dbmass <- data.frame(mass, outcome=dbclass)
glimpse(dbmass)
```
\newpage

3.f.b: Overlaid histograms:

-   These histograms show the distribution of
    the mass attribute for the two classes of
    diabetes(tested_positive/tested_negative). The x-axis is the mass
    and the y-axis is the count of the mass.
-   The fill color is used to differentiate the two classes of diabetes.
    The binwidth parameter is used to set the width of the bins to .5.
-   The alpha parameter is used to make the fill color semi-transparent.
-   The position "identity" parameter is used to overlay the histograms.

```{r 3.f.b, echo=TRUE}
ggplot(dbmass, aes(x=mass, fill=dbclass)) + geom_histogram(binwidth=.5, alpha=.5, position="identity")
```
\newpage

3.f.c: Interleaved Histograms:

-   These histograms show the distribution of
    the mass attribute for the two classes of
    diabetes(tested_positive/tested_negative).
-   The x-axis is the mass and the y-axis is the count of the mass. The
    fill color is used to differentiate the two classes of diabetes.
-   The binwidth parameter is used to set the width of the bins to .5.
-   No Alpha parameter is used because of the dodge positioning causing
    the distributions not to overlap
-   The position "dodge" parameter is used to interleave the histograms.

```{r 3.f.c, echo=TRUE}
ggplot(dbmass, aes(x=mass, fill=dbclass)) + geom_histogram(binwidth=.5, position="dodge")

```
\newpage

3.f.d: Density plots:

-   These density plots show the distribution
    of the mass attribute for the two classes of
    diabetes(tested_positive/tested_negative).
-   The x-axis is the mass and the y-axis is the density of the mass.
-   The fill color is used to differentiate the two classes of diabetes.

```{r 3.f.d, echo=TRUE}
ggplot(dbmass, aes(x=mass, fill=dbclass)) + geom_density()
```
\newpage

3.f.e: Density plots with semitransparent fill:

-   These density plots show the distribution
    of the mass attribute for the two classes of
    diabetes(tested_positive/tested_negative).
-   The x-axis is the mass and the y-axis is the density of the mass.
-   The fill color is used to differentiate the two classes of diabetes.
-   The alpha parameter is used to make the fill color semi-transparent.

```{r 3.f.e, echo=TRUE}
ggplot(dbmass, aes(x=mass, fill=dbclass)) + geom_density(alpha=.3)
```

\newpage

4 Read the titanic.csv file from DATA folder to a variable named passengers and perform the following steps and explain the operation very briefly. Please make sure you have tidyverse installed on your system and you may specifically need to import the tidyr library. Otherwise, the chain of operations through ”piping” won’t work.

4 Environment Setup

```{r 4, echo=TRUE}
# build path to titanic.csv
tit_file <- file.path("titanic.csv")
# Build data frame from the data set.
passengers <- read.delim(tit_file, header = TRUE, sep = ',')
glimpse(passengers)
```

\newpage

4.a passengers %>% drop_na() %>% summary():

This code starts with the passengers data frame then pipes it to the drop_na() function which drops all rows with NA values. The resulting data frame is then piped to the summary() function which returns a summary of the data frame.

```{r 4.a, echo=TRUE}
passengers %>% drop_na() %>% summary()
```
\newpage

4.b passengers %>% filter(Sex == "male")
This code starts with the passengers data frame then pipes it to the filter function at which point the sex is filtered to males only.  The Glimpse funciton was added by me to make the output more readable.

```{r 4.b, echo=TRUE}
passengers %>% filter(Sex == "male")  %>% glimpse()
```
\newpage

4.c passengers %>% arrange(desc(Fare))
This code starts with the passengers data frame then pipes it to the arrange function at which point the data frame is sorted in descending order by the Fare column.  The Glimpse funciton was added by me to make the output more readable.

```{r 4.c, echo=TRUE}
passengers %>% arrange(desc(Fare)) %>% glimpse()
```

\newpage

4.d passengers %>% mutate(FamSize = Parch + SibSp)
This code starts with the passengers data frame then pipes it to the mutate function at which point a new column is created called FamSize which is the sum of the Parch and SibSp columns. The Glimpse funciton was added by me to make the output more readable.
```{r 4.d, echo=TRUE}
passengers %>% mutate(FamSize = Parch + SibSp) %>% glimpse()
```

\newpage

4.e passengers %>% group_by(Sex) %>% summarise(meanFare = mean(Fare), numSurv = sum(Survived)) 
This code starts with the passengers data frame then pipes it to the group_by function at which point the data frame will be filtered by sex.  The data frame is then piped to the summarise function at which point the meanFare and numSurv columns are created.  The meanFare column is the mean of the Fare column and the numSurv column is the sum of the Survived column. The The Glimpse funciton funciton was added by me to make the output more readable.

```{r 4.e, echo=TRUE}
passengers %>% group_by(Sex) %>% summarise(meanFare = mean(Fare), numSurv = sum(Survived)) %>% glimpse()
```
\newpage

5 Using quantile(), calculate 10th; 30th; 50th; 60th percentiles of skin
attribute of diabetes data.\
These are representative of the 10th, 30th, 50th, and 60th percentiles
of the skin attribute of diabetes data. Meaning that 10% of the data is
less than the 10th percentile, 30% of the data is less than the 30th
percentile, etc.

```{r 5, echo=TRUE}
quantile(diabetes$skin, probs = c(0.1, 0.3, 0.5, 0.6))
```
